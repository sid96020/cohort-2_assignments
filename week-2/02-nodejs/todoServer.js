/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const fs = require('fs');
  
  const app = express();
const min = 100000;
const max = 999999;

// Generate a random integer between min (inclusive) and max (exclusive)
const randomInteger = Math.floor(Math.random() * (max - min) + min);

// Generate a random integer within a specific range (inclusive)
function getRandomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1) + min);
}
  app.use(bodyParser.json());
  
  app.get('/todos', (req, res) => {
    let todo = {};
    fs.readFile('./todos.json', 'utf8', (err, data) => {
      if (err) {
        return err;
      }
      todo=data;
      res.send(todo);
    });  
  }
  )

  app.get('/todos/:id', (req, res) => {
    let todo = {};

    fs.readFile('./todos.json', 'utf8', (err, data) => {
      if (err) {
        return err;
      }
      let Found_Flag = false;
      let req_id = req.params.id;
      todo=JSON.parse(data);
      for (let i = 0; i < todo.length; i++){
        if(todo[i].id == req_id){
          Found_Flag = true;
          res.json(todo[i]);
        }
      }
      if(!Found_Flag){
        return res.status(404).json({error: "ID Not Found"});
      }
    });  
  }
  )

  app.post('/todos', (req, res) => {

    fs.readFile('./todos.json', 'utf8', (err, data) => {
      todo=JSON.parse(data);
      Generated_id = getRandomInt(min, max);
      todo.push({id:Generated_id, title:req.body.title, description:req.body.description});
      fs.writeFile('./todos.json', JSON.stringify(todo), (err) => {
        if (err) {
          return err;
        }
        res.status(201).json({id:Generated_id})
      });

    });
  })

  
  app.put('/todos/:id', (req, res) => {

        fs.readFile('./todos.json', 'utf8', (err, data) => {
          if (err) {
            return err;
          }
          let req_id = parseInt(req.params.id,10);
          let Found_Flag = false;
          todo=JSON.parse(data);
          for (let i = 0; i < todo.length; i++){
            if(todo[i].id == req_id){
              Found_Flag = true;
              todo[i]={id:req_id, ...req.body}
              fs.writeFile('./todos.json', JSON.stringify(todo), (err) => {
                if (err) {
                  return err;
                }
                return res.status(200).json({message: "Todo Updataed"});

              })

              break;
            }
          }
          if(!Found_Flag){
            return res.status(404).json({error: "ID Not Found"});
          }
          
      }); 
  }
  )

  app.delete('/todos/:id', (req, res) => {

    fs.readFile('./todos.json', 'utf8', (err, data) => {
      if (err) {
        return err;
      }
      let req_id = parseInt(req.params.id,10);
      let Found_Flag = false;
      todo=JSON.parse(data);
      for (let i = 0; i < todo.length; i++){
        if(todo[i].id == req_id){
          Found_Flag = true;
          new_todo=todo.filter(data => data.id != req_id)
          fs.writeFile('./todos.json', JSON.stringify(new_todo), (err) => {
            if (err) {
              return err;
            }
            return res.status(200).json({message: "Todo deleted successfully"});

          })

          break;
        }
      }
      if(!Found_Flag){
        return res.status(404).json({error: "ID Not Found"});
      }
      
  }); 
}
)
  module.exports = app;